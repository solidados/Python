# -*- coding: utf-8 -*-
"""ChatBot_day1_ipynb_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PuT4OTZhxcZDoFMeKzl_aAfbupTjPFot
"""

import random
import nltk
import json

"""## **Строки, списки и словари**

## **День 1**
"""

## Создаю бот-переменную, в которой буду хранить всю память моего бота – всю информацию, которая ему понадобится для работы
## Структурирую переменную в виде "словаря"
## https://live.skillbox.ru/webinars/code/uchim-bota-na-python-ponimat-tekst121021/

# BOT_CONFIG = {
#     'intents': {
#         'hello': {
#             'examples': ['Hello', 'Привет', 'Hi!', 'Здравствуйте'],
#             'responses': ['Добрый день', 'Здравия желаю', 'Добрый вечер']
#             },
#         'bye': {
#             'examples': ['пОкА', 'До свидания', 'Увидимся', 'До связи', 'чао', 'Счастливо'],
#             'responses': ['До свидания', 'Счастливо', 'Всего доброго', 'До связи', 'Саёнара', 'Чао', 'Всего хорошего']
#             },
#         'howdoyoudo': {
#             'examples': ['как дела?', 'как жизнь?', 'как поживаете?', 'как ты?', 'как вы?'],
#             'responses': ['всё хорошо', 'Спасибо, хорошо', 'Не жалуюсь']
#             },
#         'thankyou': {
#             'examples': ['спасибо', 'благодарю'],
#             'responses': ['не за что', 'обращайтесь', 'пожалуйста', 'всегда рад помочь']
#             }
#       },
#       'not_found': {
#           'responses': ['Извините, не удалось определить интент', 'Я пока ещё глупый бот и ничего не понимаю']
#       }
# }

with open('/content/BOT_CONFIG.json') as f:
  BOT_CONFIG = json.load(f)

def clean(text):
  cleaned_text = ''
  for ch in text.lower():
    if ch in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ':
      cleaned_text = cleaned_text + ch
  return cleaned_text

def get_intent(text):
  for intent in BOT_CONFIG['intents'].keys():
    for example in BOT_CONFIG['intents'][intent]['examples']:
      cleaned_example = clean(example)
      cleaned_text = clean(text)
      if nltk.edit_distance(cleaned_example, cleaned_text) / max(len(cleaned_example), len(cleaned_text)) < 0.4:
        return intent
  return 'not_found'

def bot(text):
  intent = get_intent(text)
  if intent != 'not_found':
    return random.choice(BOT_CONFIG['intents'][intent]['responses'])
  else:
    return random.choice(BOT_CONFIG['not_found']['responses'])

input_text = ''
while input_text != 'exit':
  input_text = input() 
  response = bot(input_text)
  print(response)